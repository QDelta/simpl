//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 10 19:04:17 CST 2022
//----------------------------------------------------

package simpl.parser;

import simpl.ast.*;
import simpl.ast.Rec.Bind;

import java.io.InputStream;
import java.util.Vector;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Tue May 10 19:04:17 CST 2022
 */
public class Parser extends java_cup.runtime.lr_parser {

    /**
     * Production table.
     */
    protected static final short[][] _production_table =
            unpackFromStrings(new String[]{
                    "\000\054\000\002\002\004\000\002\002\003\000\002\002" +
                            "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
                            "\000\002\002\004\000\002\002\006\000\002\002\006\000" +
                            "\002\002\005\000\002\002\007\000\002\002\004\000\002" +
                            "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
                            "\004\000\002\002\005\000\002\002\005\000\002\002\005" +
                            "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
                            "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
                            "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
                            "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
                            "\000\002\002\004\000\002\002\011\000\002\002\011\000" +
                            "\002\002\010\000\002\002\016\000\002\002\016\000\002" +
                            "\002\006\000\002\002\003\000\002\002\005\000\002\003" +
                            "\005\000\002\004\005\000\002\004\002"});
    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\171\000\054\004\020\005\016\006\007\007\022\011" +
                            "\005\012\027\015\004\016\015\021\026\024\011\026\014" +
                            "\027\025\030\012\040\006\050\031\053\024\054\013\055" +
                            "\010\060\017\063\023\064\021\001\002\000\004\064\166" +
                            "\001\002\000\004\064\163\001\002\000\054\004\020\005" +
                            "\016\006\007\007\022\011\005\012\027\015\004\016\015" +
                            "\021\026\024\011\026\014\027\025\030\012\040\006\050" +
                            "\031\053\024\054\013\055\010\060\017\063\023\064\021" +
                            "\001\002\000\004\064\157\001\002\000\054\004\020\005" +
                            "\016\006\007\007\022\011\005\012\027\015\004\016\015" +
                            "\021\026\024\011\026\014\027\025\030\012\040\006\050" +
                            "\031\053\024\054\013\055\010\060\017\063\023\064\021" +
                            "\001\002\000\054\004\020\005\016\006\007\007\022\011" +
                            "\005\012\027\015\004\016\015\021\026\024\011\026\014" +
                            "\027\025\030\012\040\006\050\031\053\024\054\013\055" +
                            "\010\060\017\063\023\064\021\001\002\000\054\004\020" +
                            "\005\016\006\007\007\022\011\005\012\027\015\004\016" +
                            "\015\021\026\024\011\026\014\027\025\030\012\040\006" +
                            "\050\031\053\024\054\013\055\010\060\017\063\023\064" +
                            "\021\001\002\000\054\004\020\005\016\006\007\007\022" +
                            "\011\005\012\027\015\004\016\015\021\026\024\011\026" +
                            "\014\027\025\030\012\040\006\050\031\053\024\054\013" +
                            "\055\010\060\017\063\023\064\021\001\002\000\142\002" +
                            "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
                            "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
                            "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
                            "\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
                            "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
                            "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\052\ufffe\053" +
                            "\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe" +
                            "\063\ufffe\064\ufffe\001\002\000\054\004\020\005\016\006" +
                            "\007\007\022\011\005\012\027\015\004\016\015\021\026" +
                            "\024\011\026\014\027\025\030\012\040\006\050\031\053" +
                            "\024\054\013\055\010\060\017\063\023\064\021\001\002" +
                            "\000\054\004\020\005\016\006\007\007\022\011\005\012" +
                            "\027\015\004\016\015\021\026\024\011\026\014\027\025" +
                            "\030\012\040\006\050\031\053\024\054\013\055\010\060" +
                            "\017\063\023\064\021\001\002\000\054\004\020\005\016" +
                            "\006\007\007\022\011\005\012\027\015\004\016\015\021" +
                            "\026\024\011\026\014\027\025\030\012\040\006\050\031" +
                            "\053\024\054\013\055\010\060\017\063\023\064\021\001" +
                            "\002\000\142\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
                            "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
                            "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc" +
                            "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
                            "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
                            "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
                            "\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc" +
                            "\060\ufffc\061\ufffc\063\ufffc\064\ufffc\001\002\000\142\002" +
                            "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
                            "\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020" +
                            "\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff" +
                            "\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035" +
                            "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff" +
                            "\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\052\uffff\053" +
                            "\uffff\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
                            "\063\uffff\064\uffff\001\002\000\004\064\127\001\002\000" +
                            "\142\002\000\004\000\005\000\006\000\007\000\010\000" +
                            "\011\000\012\000\013\000\014\000\015\000\016\000\017" +
                            "\000\020\000\021\000\022\000\023\000\024\000\025\000" +
                            "\026\000\027\000\030\000\031\000\032\000\033\000\034" +
                            "\000\035\000\036\000\037\000\040\000\041\000\042\000" +
                            "\043\000\044\000\045\000\046\000\047\000\050\000\052" +
                            "\000\053\000\054\000\055\000\056\000\057\000\060\000" +
                            "\061\000\063\000\064\000\001\002\000\054\004\020\005" +
                            "\016\006\007\007\022\011\005\012\027\015\004\016\015" +
                            "\021\026\024\011\026\014\027\025\030\012\040\006\050" +
                            "\031\053\024\054\013\055\010\060\017\063\023\064\021" +
                            "\001\002\000\142\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
                            "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
                            "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
                            "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
                            "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
                            "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
                            "\050\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
                            "\ufffd\060\ufffd\061\ufffd\063\ufffd\064\ufffd\001\002\000\054" +
                            "\004\020\005\016\006\007\007\022\011\005\012\027\015" +
                            "\004\016\015\021\026\024\011\026\014\027\025\030\012" +
                            "\040\006\050\031\053\024\054\013\055\010\060\017\063" +
                            "\023\064\021\001\002\000\004\064\074\001\002\000\116" +
                            "\002\042\004\020\005\016\006\007\007\022\011\005\012" +
                            "\027\015\004\016\015\021\026\024\011\026\014\027\025" +
                            "\030\012\031\047\032\033\033\044\034\053\035\043\036" +
                            "\037\037\045\040\006\041\046\042\050\043\036\044\041" +
                            "\045\052\046\034\047\032\050\031\052\040\053\024\054" +
                            "\013\055\010\057\035\060\017\063\023\064\021\001\002" +
                            "\000\142\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010" +
                            "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
                            "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
                            "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
                            "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
                            "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
                            "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
                            "\uffda\061\uffda\063\uffda\064\uffda\001\002\000\054\004\020" +
                            "\005\016\006\007\007\022\011\005\012\027\015\004\016" +
                            "\015\021\026\024\011\026\014\027\025\030\012\040\006" +
                            "\050\031\053\024\054\013\055\010\060\017\063\023\064" +
                            "\021\001\002\000\054\004\020\005\016\006\007\007\022" +
                            "\011\005\012\027\015\004\016\015\021\026\024\011\026" +
                            "\014\027\025\030\012\040\006\050\031\053\024\054\013" +
                            "\055\010\060\017\063\023\064\021\001\002\000\054\004" +
                            "\020\005\016\006\007\007\022\011\005\012\027\015\004" +
                            "\016\015\021\026\024\011\026\014\027\025\030\012\040" +
                            "\006\050\031\053\024\054\013\055\010\060\017\063\023" +
                            "\064\021\001\002\000\054\004\020\005\016\006\007\007" +
                            "\022\011\005\012\027\015\004\016\015\021\026\024\011" +
                            "\026\014\027\025\030\012\040\006\050\031\053\024\054" +
                            "\013\055\010\060\017\063\023\064\021\001\002\000\054" +
                            "\004\020\005\016\006\007\007\022\011\005\012\027\015" +
                            "\004\016\015\021\026\024\011\026\014\027\025\030\012" +
                            "\040\006\050\031\053\024\054\013\055\010\060\017\063" +
                            "\023\064\021\001\002\000\054\004\020\005\016\006\007" +
                            "\007\022\011\005\012\027\015\004\016\015\021\026\024" +
                            "\011\026\014\027\025\030\012\040\006\050\031\053\024" +
                            "\054\013\055\010\060\017\063\023\064\021\001\002\000" +
                            "\054\004\020\005\016\006\007\007\022\011\005\012\027" +
                            "\015\004\016\015\021\026\024\011\026\014\027\025\030" +
                            "\012\040\006\050\031\053\024\054\013\055\010\060\017" +
                            "\063\023\064\021\001\002\000\054\004\020\005\016\006" +
                            "\007\007\022\011\005\012\027\015\004\016\015\021\026" +
                            "\024\011\026\014\027\025\030\012\040\006\050\031\053" +
                            "\024\054\013\055\010\060\017\063\023\064\021\001\002" +
                            "\000\004\002\001\001\002\000\054\004\020\005\016\006" +
                            "\007\007\022\011\005\012\027\015\004\016\015\021\026" +
                            "\024\011\026\014\027\025\030\012\040\006\050\031\053" +
                            "\024\054\013\055\010\060\017\063\023\064\021\001\002" +
                            "\000\054\004\020\005\016\006\007\007\022\011\005\012" +
                            "\027\015\004\016\015\021\026\024\011\026\014\027\025" +
                            "\030\012\040\006\050\031\053\024\054\013\055\010\060" +
                            "\017\063\023\064\021\001\002\000\054\004\020\005\016" +
                            "\006\007\007\022\011\005\012\027\015\004\016\015\021" +
                            "\026\024\011\026\014\027\025\030\012\040\006\050\031" +
                            "\053\024\054\013\055\010\060\017\063\023\064\021\001" +
                            "\002\000\054\004\020\005\016\006\007\007\022\011\005" +
                            "\012\027\015\004\016\015\021\026\024\011\026\014\027" +
                            "\025\030\012\040\006\050\031\053\024\054\013\055\010" +
                            "\060\017\063\023\064\021\001\002\000\054\004\020\005" +
                            "\016\006\007\007\022\011\005\012\027\015\004\016\015" +
                            "\021\026\024\011\026\014\027\025\030\012\040\006\050" +
                            "\031\053\024\054\013\055\010\060\017\063\023\064\021" +
                            "\001\002\000\054\004\020\005\016\006\007\007\022\011" +
                            "\005\012\027\015\004\016\015\021\026\024\011\026\014" +
                            "\027\025\030\012\040\006\050\031\053\024\054\013\055" +
                            "\010\060\017\063\023\064\021\001\002\000\142\002\uffe1" +
                            "\004\uffe1\005\016\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
                            "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
                            "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
                            "\uffe1\030\012\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
                            "\036\uffe1\037\uffe1\040\006\041\uffe1\042\uffe1\043\uffe1\044" +
                            "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1\053\024" +
                            "\054\013\055\010\056\uffe1\057\uffe1\060\uffe1\061\uffe1\063" +
                            "\uffe1\064\uffe1\001\002\000\054\004\020\005\016\006\007" +
                            "\007\022\011\005\012\027\015\004\016\015\021\026\024" +
                            "\011\026\014\027\025\030\012\040\006\050\031\053\024" +
                            "\054\013\055\010\060\017\063\023\064\021\001\002\000" +
                            "\054\004\020\005\016\006\007\007\022\011\005\012\027" +
                            "\015\004\016\015\021\026\024\011\026\014\027\025\030" +
                            "\012\040\006\050\031\053\024\054\013\055\010\060\017" +
                            "\063\023\064\021\001\002\000\142\002\ufff0\004\ufff0\005" +
                            "\016\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
                            "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
                            "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\012" +
                            "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\043\036\037\037" +
                            "\045\040\006\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
                            "\046\ufff0\047\ufff0\050\ufff0\052\ufff0\053\024\054\013\055" +
                            "\010\056\ufff0\057\ufff0\060\017\061\ufff0\063\ufff0\064\ufff0" +
                            "\001\002\000\126\002\uffe8\004\uffe8\005\016\006\uffe8\007" +
                            "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
                            "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
                            "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\012\031\uffe8\032\uffe8" +
                            "\033\044\034\053\035\043\036\037\037\045\040\006\047" +
                            "\032\050\uffe8\052\uffe8\053\024\054\013\055\010\056\uffe8" +
                            "\057\uffe8\060\017\061\uffe8\063\uffe8\064\uffe8\001\002\000" +
                            "\126\002\uffeb\004\uffeb\005\016\006\uffeb\007\uffeb\010\uffeb" +
                            "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
                            "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
                            "\026\uffeb\027\uffeb\030\012\031\uffeb\032\uffeb\033\044\034" +
                            "\053\035\043\036\037\037\045\040\006\047\032\050\uffeb" +
                            "\052\uffeb\053\024\054\013\055\010\056\uffeb\057\uffeb\060" +
                            "\017\061\uffeb\063\uffeb\064\uffeb\001\002\000\142\002\uffe6" +
                            "\004\uffe6\005\016\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
                            "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
                            "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
                            "\uffe6\030\012\031\047\032\uffe6\033\044\034\053\035\043" +
                            "\036\037\037\045\040\006\041\046\042\050\043\036\044" +
                            "\041\045\052\046\034\047\032\050\uffe6\052\uffe6\053\024" +
                            "\054\013\055\010\056\uffe6\057\uffe6\060\017\061\uffe6\063" +
                            "\uffe6\064\uffe6\001\002\000\126\002\uffec\004\uffec\005\016" +
                            "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
                            "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
                            "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\012\031" +
                            "\uffec\032\uffec\033\044\034\053\035\043\036\037\037\045" +
                            "\040\006\047\032\050\uffec\052\uffec\053\024\054\013\055" +
                            "\010\056\uffec\057\uffec\060\017\061\uffec\063\uffec\064\uffec" +
                            "\001\002\000\142\002\uffed\004\uffed\005\016\006\uffed\007" +
                            "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
                            "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
                            "\uffed\025\uffed\026\uffed\027\uffed\030\012\031\uffed\032\uffed" +
                            "\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\006\041" +
                            "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed" +
                            "\050\uffed\052\uffed\053\024\054\013\055\010\056\uffed\057" +
                            "\uffed\060\017\061\uffed\063\uffed\064\uffed\001\002\000\142" +
                            "\002\ufff1\004\ufff1\005\016\006\ufff1\007\ufff1\010\ufff1\011" +
                            "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
                            "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
                            "\ufff1\027\ufff1\030\012\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
                            "\035\043\036\037\037\045\040\006\041\ufff1\042\ufff1\043" +
                            "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1" +
                            "\053\024\054\013\055\010\056\ufff1\057\ufff1\060\017\061" +
                            "\ufff1\063\ufff1\064\ufff1\001\002\000\142\002\uffef\004\uffef" +
                            "\005\016\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
                            "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
                            "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
                            "\012\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
                            "\037\uffef\040\006\041\uffef\042\uffef\043\uffef\044\uffef\045" +
                            "\uffef\046\uffef\047\uffef\050\uffef\052\uffef\053\024\054\013" +
                            "\055\010\056\uffef\057\uffef\060\017\061\uffef\063\uffef\064" +
                            "\uffef\001\002\000\126\002\uffe9\004\uffe9\005\016\006\uffe9" +
                            "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
                            "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
                            "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\012\031\uffe9\032" +
                            "\uffe9\033\044\034\053\035\043\036\037\037\045\040\006" +
                            "\047\032\050\uffe9\052\uffe9\053\024\054\013\055\010\056" +
                            "\uffe9\057\uffe9\060\017\061\uffe9\063\uffe9\064\uffe9\001\002" +
                            "\000\140\002\uffe3\004\uffe3\005\016\006\uffe3\007\uffe3\010" +
                            "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
                            "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
                            "\uffe3\026\uffe3\027\uffe3\030\012\031\047\032\033\033\044" +
                            "\034\053\035\043\036\037\037\045\040\006\041\046\042" +
                            "\050\043\036\044\041\045\052\046\034\047\032\050\uffe3" +
                            "\053\024\054\013\055\010\056\uffe3\057\uffe3\060\017\061" +
                            "\uffe3\063\uffe3\064\uffe3\001\002\000\142\002\uffee\004\uffee" +
                            "\005\016\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
                            "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
                            "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
                            "\012\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
                            "\037\uffee\040\006\041\uffee\042\uffee\043\uffee\044\uffee\045" +
                            "\uffee\046\uffee\047\uffee\050\uffee\052\uffee\053\024\054\013" +
                            "\055\010\056\uffee\057\uffee\060\017\061\uffee\063\uffee\064" +
                            "\uffee\001\002\000\126\002\uffea\004\uffea\005\016\006\uffea" +
                            "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
                            "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
                            "\024\uffea\025\uffea\026\uffea\027\uffea\030\012\031\uffea\032" +
                            "\uffea\033\044\034\053\035\043\036\037\037\045\040\006" +
                            "\047\032\050\uffea\052\uffea\053\024\054\013\055\010\056" +
                            "\uffea\057\uffea\060\017\061\uffea\063\uffea\064\uffea\001\002" +
                            "\000\142\002\uffe2\004\uffe2\005\016\006\uffe2\007\uffe2\010" +
                            "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
                            "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
                            "\uffe2\026\uffe2\027\uffe2\030\012\031\047\032\033\033\044" +
                            "\034\053\035\043\036\037\037\045\040\006\041\046\042" +
                            "\050\043\036\044\041\045\052\046\034\047\032\050\uffe2" +
                            "\052\040\053\024\054\013\055\010\056\uffe2\057\uffe2\060" +
                            "\017\061\uffe2\063\uffe2\064\uffe2\001\002\000\126\002\uffe7" +
                            "\004\uffe7\005\016\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
                            "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
                            "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
                            "\uffe7\030\012\031\uffe7\032\uffe7\033\044\034\053\035\043" +
                            "\036\037\037\045\040\006\047\032\050\uffe7\052\uffe7\053" +
                            "\024\054\013\055\010\056\uffe7\057\uffe7\060\017\061\uffe7" +
                            "\063\uffe7\064\uffe7\001\002\000\142\002\uffe5\004\uffe5\005" +
                            "\016\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
                            "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
                            "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\012" +
                            "\031\047\032\033\033\044\034\053\035\043\036\037\037" +
                            "\045\040\006\041\046\042\050\043\036\044\041\045\052" +
                            "\046\034\047\032\050\uffe5\052\uffe5\053\024\054\013\055" +
                            "\010\056\uffe5\057\uffe5\060\017\061\uffe5\063\uffe5\064\uffe5" +
                            "\001\002\000\142\002\uffe4\004\uffe4\005\016\006\uffe4\007" +
                            "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
                            "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
                            "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\012\031\uffe4\032\uffe4" +
                            "\033\044\034\053\035\043\036\037\037\045\040\006\041" +
                            "\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\032" +
                            "\050\uffe4\052\uffe4\053\024\054\013\055\010\056\uffe4\057" +
                            "\uffe4\060\017\061\uffe4\063\uffe4\064\uffe4\001\002\000\004" +
                            "\041\075\001\002\000\054\004\020\005\016\006\007\007" +
                            "\022\011\005\012\027\015\004\016\015\021\026\024\011" +
                            "\026\014\027\025\030\012\040\006\050\031\053\024\054" +
                            "\013\055\010\060\017\063\023\064\021\001\002\000\116" +
                            "\004\020\005\016\006\007\007\022\011\005\012\027\013" +
                            "\077\015\004\016\015\021\026\024\011\026\014\027\025" +
                            "\030\012\031\047\032\033\033\044\034\053\035\043\036" +
                            "\037\037\045\040\006\041\046\042\050\043\036\044\041" +
                            "\045\052\046\034\047\032\050\031\052\040\053\024\054" +
                            "\013\055\010\057\035\060\017\063\023\064\021\001\002" +
                            "\000\054\004\020\005\016\006\007\007\022\011\005\012" +
                            "\027\015\004\016\015\021\026\024\011\026\014\027\025" +
                            "\030\012\040\006\050\031\053\024\054\013\055\010\060" +
                            "\017\063\023\064\021\001\002\000\116\004\020\005\016" +
                            "\006\007\007\022\011\005\012\027\014\101\015\004\016" +
                            "\015\021\026\024\011\026\014\027\025\030\012\031\047" +
                            "\032\033\033\044\034\053\035\043\036\037\037\045\040" +
                            "\006\041\046\042\050\043\036\044\041\045\052\046\034" +
                            "\047\032\050\031\052\040\053\024\054\013\055\010\057" +
                            "\035\060\017\063\023\064\021\001\002\000\142\002\uffe0" +
                            "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
                            "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
                            "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
                            "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
                            "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
                            "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\053\uffe0" +
                            "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\063" +
                            "\uffe0\064\uffe0\001\002\000\116\004\020\005\016\006\007" +
                            "\007\022\011\005\012\027\015\004\016\015\021\026\022" +
                            "\103\024\011\026\014\027\025\030\012\031\047\032\033" +
                            "\033\044\034\053\035\043\036\037\037\045\040\006\041" +
                            "\046\042\050\043\036\044\041\045\052\046\034\047\032" +
                            "\050\031\052\040\053\024\054\013\055\010\057\035\060" +
                            "\017\063\023\064\021\001\002\000\006\004\105\054\104" +
                            "\001\002\000\004\064\116\001\002\000\004\051\106\001" +
                            "\002\000\054\004\020\005\016\006\007\007\022\011\005" +
                            "\012\027\015\004\016\015\021\026\024\011\026\014\027" +
                            "\025\030\012\040\006\050\031\053\024\054\013\055\010" +
                            "\060\017\063\023\064\021\001\002\000\116\004\020\005" +
                            "\016\006\007\007\022\011\005\012\027\015\004\016\015" +
                            "\021\026\023\110\024\011\026\014\027\025\030\012\031" +
                            "\047\032\033\033\044\034\053\035\043\036\037\037\045" +
                            "\040\006\041\046\042\050\043\036\044\041\045\052\046" +
                            "\034\047\032\050\031\052\040\053\024\054\013\055\010" +
                            "\057\035\060\017\063\023\064\021\001\002\000\004\064" +
                            "\111\001\002\000\004\047\112\001\002\000\004\064\113" +
                            "\001\002\000\004\051\114\001\002\000\054\004\020\005" +
                            "\016\006\007\007\022\011\005\012\027\015\004\016\015" +
                            "\021\026\024\011\026\014\027\025\030\012\040\006\050" +
                            "\031\053\024\054\013\055\010\060\017\063\023\064\021" +
                            "\001\002\000\142\002\uffdc\004\020\005\016\006\007\007" +
                            "\022\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
                            "\016\015\017\uffdc\020\uffdc\021\026\022\uffdc\023\uffdc\024" +
                            "\011\025\uffdc\026\014\027\025\030\012\031\047\032\033" +
                            "\033\044\034\053\035\043\036\037\037\045\040\006\041" +
                            "\046\042\050\043\036\044\041\045\052\046\034\047\032" +
                            "\050\031\052\040\053\024\054\013\055\010\056\uffdc\057" +
                            "\035\060\017\061\uffdc\063\023\064\021\001\002\000\004" +
                            "\051\117\001\002\000\054\004\020\005\016\006\007\007" +
                            "\022\011\005\012\027\015\004\016\015\021\026\024\011" +
                            "\026\014\027\025\030\012\040\006\050\031\053\024\054" +
                            "\013\055\010\060\017\063\023\064\021\001\002\000\116" +
                            "\004\020\005\016\006\007\007\022\011\005\012\027\015" +
                            "\004\016\015\021\026\023\121\024\011\026\014\027\025" +
                            "\030\012\031\047\032\033\033\044\034\053\035\043\036" +
                            "\037\037\045\040\006\041\046\042\050\043\036\044\041" +
                            "\045\052\046\034\047\032\050\031\052\040\053\024\054" +
                            "\013\055\010\057\035\060\017\063\023\064\021\001\002" +
                            "\000\004\055\122\001\002\000\004\064\123\001\002\000" +
                            "\004\051\124\001\002\000\054\004\020\005\016\006\007" +
                            "\007\022\011\005\012\027\015\004\016\015\021\026\024" +
                            "\011\026\014\027\025\030\012\040\006\050\031\053\024" +
                            "\054\013\055\010\060\017\063\023\064\021\001\002\000" +
                            "\142\002\uffdd\004\020\005\016\006\007\007\022\010\uffdd" +
                            "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\015\017" +
                            "\uffdd\020\uffdd\021\026\022\uffdd\023\uffdd\024\011\025\uffdd" +
                            "\026\014\027\025\030\012\031\047\032\033\033\044\034" +
                            "\053\035\043\036\037\037\045\040\006\041\046\042\050" +
                            "\043\036\044\041\045\052\046\034\047\032\050\031\052" +
                            "\040\053\024\054\013\055\010\056\uffdd\057\035\060\017" +
                            "\061\uffdd\063\023\064\021\001\002\000\142\002\ufff4\004" +
                            "\ufff4\005\016\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
                            "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
                            "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
                            "\030\012\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
                            "\ufff4\037\ufff4\040\006\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
                            "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4\053\024\054" +
                            "\013\055\010\056\ufff4\057\ufff4\060\ufff4\061\ufff4\063\ufff4" +
                            "\064\ufff4\001\002\000\004\051\134\001\002\000\142\002" +
                            "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
                            "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
                            "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
                            "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
                            "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
                            "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\053" +
                            "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
                            "\063\uffd6\064\uffd6\001\002\000\142\002\ufff8\004\ufff8\005" +
                            "\ufff8\006\ufff8\007\ufff8\010\132\011\ufff8\012\ufff8\013\ufff8" +
                            "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
                            "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
                            "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
                            "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
                            "\046\ufff8\047\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
                            "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\063\ufff8\064\ufff8" +
                            "\001\002\000\004\064\127\001\002\000\142\002\uffd7\004" +
                            "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
                            "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
                            "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
                            "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
                            "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
                            "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\053\uffd7\054" +
                            "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\063\uffd7" +
                            "\064\uffd7\001\002\000\054\004\020\005\016\006\007\007" +
                            "\022\011\005\012\027\015\004\016\015\021\026\024\011" +
                            "\026\014\027\025\030\012\040\006\050\031\053\024\054" +
                            "\013\055\010\060\017\063\023\064\021\001\002\000\142" +
                            "\002\uffd8\004\020\005\016\006\007\007\022\010\uffd8\011" +
                            "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\015\017\uffd8" +
                            "\020\uffd8\021\026\022\uffd8\023\uffd8\024\011\025\uffd8\026" +
                            "\014\027\025\030\012\031\047\032\033\033\044\034\053" +
                            "\035\043\036\037\037\045\040\006\041\046\042\050\043" +
                            "\036\044\041\045\052\046\034\047\032\050\031\052\040" +
                            "\053\024\054\013\055\010\056\uffd8\057\035\060\017\061" +
                            "\uffd8\063\023\064\021\001\002\000\120\004\020\005\016" +
                            "\006\007\007\022\011\005\012\027\015\004\016\015\021" +
                            "\026\024\011\026\014\027\025\030\012\031\047\032\033" +
                            "\033\044\034\053\035\043\036\037\037\045\040\006\041" +
                            "\046\042\050\043\036\044\041\045\052\046\034\047\032" +
                            "\050\031\052\040\053\024\054\013\055\010\056\140\057" +
                            "\035\060\017\061\137\063\023\064\021\001\002\000\142" +
                            "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
                            "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
                            "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
                            "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
                            "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
                            "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9" +
                            "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
                            "\uffd9\063\uffd9\064\uffd9\001\002\000\054\004\020\005\016" +
                            "\006\007\007\022\011\005\012\027\015\004\016\015\021" +
                            "\026\024\011\026\014\027\025\030\012\040\006\050\031" +
                            "\053\024\054\013\055\010\060\017\063\023\064\021\001" +
                            "\002\000\116\004\020\005\016\006\007\007\022\011\005" +
                            "\012\027\015\004\016\015\021\026\024\011\026\014\027" +
                            "\025\030\012\031\047\032\033\033\044\034\053\035\043" +
                            "\036\037\037\045\040\006\041\046\042\050\043\036\044" +
                            "\041\045\052\046\034\047\032\050\031\052\040\053\024" +
                            "\054\013\055\010\057\035\060\017\061\142\063\023\064" +
                            "\021\001\002\000\142\002\ufff7\004\ufff7\005\ufff7\006\ufff7" +
                            "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
                            "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
                            "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
                            "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
                            "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
                            "\ufff7\050\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7" +
                            "\057\ufff7\060\ufff7\061\ufff7\063\ufff7\064\ufff7\001\002\000" +
                            "\142\002\ufffb\004\ufffb\005\016\006\ufffb\007\ufffb\010\ufffb" +
                            "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
                            "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
                            "\026\ufffb\027\ufffb\030\012\031\ufffb\032\ufffb\033\ufffb\034" +
                            "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\006\041\ufffb\042\ufffb" +
                            "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\052" +
                            "\ufffb\053\024\054\013\055\010\056\ufffb\057\ufffb\060\ufffb" +
                            "\061\ufffb\063\ufffb\064\ufffb\001\002\000\116\004\020\005" +
                            "\016\006\007\007\022\011\005\012\027\015\004\016\015" +
                            "\017\145\021\026\024\011\026\014\027\025\030\012\031" +
                            "\047\032\033\033\044\034\053\035\043\036\037\037\045" +
                            "\040\006\041\046\042\050\043\036\044\041\045\052\046" +
                            "\034\047\032\050\031\052\040\053\024\054\013\055\010" +
                            "\057\035\060\017\063\023\064\021\001\002\000\054\004" +
                            "\020\005\016\006\007\007\022\011\005\012\027\015\004" +
                            "\016\015\021\026\024\011\026\014\027\025\030\012\040" +
                            "\006\050\031\053\024\054\013\055\010\060\017\063\023" +
                            "\064\021\001\002\000\116\004\020\005\016\006\007\007" +
                            "\022\011\005\012\027\015\004\016\015\020\147\021\026" +
                            "\024\011\026\014\027\025\030\012\031\047\032\033\033" +
                            "\044\034\053\035\043\036\037\037\045\040\006\041\046" +
                            "\042\050\043\036\044\041\045\052\046\034\047\032\050" +
                            "\031\052\040\053\024\054\013\055\010\057\035\060\017" +
                            "\063\023\064\021\001\002\000\054\004\020\005\016\006" +
                            "\007\007\022\011\005\012\027\015\004\016\015\021\026" +
                            "\024\011\026\014\027\025\030\012\040\006\050\031\053" +
                            "\024\054\013\055\010\060\017\063\023\064\021\001\002" +
                            "\000\142\002\uffde\004\020\005\016\006\007\007\022\010" +
                            "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\015" +
                            "\017\uffde\020\uffde\021\026\022\uffde\023\uffde\024\011\025" +
                            "\uffde\026\014\027\025\030\012\031\047\032\033\033\044" +
                            "\034\053\035\043\036\037\037\045\040\006\041\046\042" +
                            "\050\043\036\044\041\045\052\046\034\047\032\050\031" +
                            "\052\040\053\024\054\013\055\010\056\uffde\057\035\060" +
                            "\017\061\uffde\063\023\064\021\001\002\000\142\002\ufff3" +
                            "\004\ufff3\005\016\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
                            "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
                            "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
                            "\ufff3\030\012\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
                            "\036\ufff3\037\ufff3\040\006\041\ufff3\042\ufff3\043\ufff3\044" +
                            "\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\053\024" +
                            "\054\013\055\010\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063" +
                            "\ufff3\064\ufff3\001\002\000\142\002\ufff5\004\ufff5\005\016" +
                            "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
                            "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
                            "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\012\031" +
                            "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
                            "\040\006\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
                            "\ufff5\047\ufff5\050\ufff5\052\ufff5\053\024\054\013\055\010" +
                            "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\064\ufff5\001" +
                            "\002\000\116\004\020\005\016\006\007\007\022\011\005" +
                            "\012\027\015\004\016\015\021\026\024\011\025\154\026" +
                            "\014\027\025\030\012\031\047\032\033\033\044\034\053" +
                            "\035\043\036\037\037\045\040\006\041\046\042\050\043" +
                            "\036\044\041\045\052\046\034\047\032\050\031\052\040" +
                            "\053\024\054\013\055\010\057\035\060\017\063\023\064" +
                            "\021\001\002\000\054\004\020\005\016\006\007\007\022" +
                            "\011\005\012\027\015\004\016\015\021\026\024\011\026" +
                            "\014\027\025\030\012\040\006\050\031\053\024\054\013" +
                            "\055\010\060\017\063\023\064\021\001\002\000\142\002" +
                            "\uffdb\004\020\005\016\006\007\007\022\010\uffdb\011\uffdb" +
                            "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\015\017\uffdb\020" +
                            "\uffdb\021\026\022\uffdb\023\uffdb\024\011\025\uffdb\026\014" +
                            "\027\025\030\012\031\047\032\033\033\044\034\053\035" +
                            "\043\036\037\037\045\040\006\041\046\042\050\043\036" +
                            "\044\041\045\052\046\034\047\032\050\031\052\040\053" +
                            "\024\054\013\055\010\056\uffdb\057\035\060\017\061\uffdb" +
                            "\063\023\064\021\001\002\000\142\002\ufff2\004\ufff2\005" +
                            "\016\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
                            "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
                            "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\012" +
                            "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
                            "\ufff2\040\006\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2" +
                            "\046\ufff2\047\ufff2\050\ufff2\052\ufff2\053\024\054\013\055" +
                            "\010\056\ufff2\057\ufff2\060\ufff2\061\ufff2\063\ufff2\064\ufff2" +
                            "\001\002\000\004\051\160\001\002\000\054\004\020\005" +
                            "\016\006\007\007\022\011\005\012\027\015\004\016\015" +
                            "\021\026\024\011\026\014\027\025\030\012\040\006\050" +
                            "\031\053\024\054\013\055\010\060\017\063\023\064\021" +
                            "\001\002\000\142\002\ufffa\004\020\005\016\006\007\007" +
                            "\022\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
                            "\016\015\017\ufffa\020\ufffa\021\026\022\ufffa\023\ufffa\024" +
                            "\011\025\ufffa\026\014\027\025\030\012\031\047\032\033" +
                            "\033\044\034\053\035\043\036\037\037\045\040\006\041" +
                            "\046\042\050\043\036\044\041\045\052\046\034\047\032" +
                            "\050\031\052\040\053\024\054\013\055\010\056\ufffa\057" +
                            "\035\060\017\061\ufffa\063\023\064\021\001\002\000\142" +
                            "\002\ufff6\004\ufff6\005\016\006\ufff6\007\ufff6\010\ufff6\011" +
                            "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
                            "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
                            "\ufff6\027\ufff6\030\012\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
                            "\035\ufff6\036\ufff6\037\ufff6\040\006\041\ufff6\042\ufff6\043" +
                            "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\052\ufff6" +
                            "\053\024\054\013\055\010\056\ufff6\057\ufff6\060\ufff6\061" +
                            "\ufff6\063\ufff6\064\ufff6\001\002\000\004\051\164\001\002" +
                            "\000\054\004\020\005\016\006\007\007\022\011\005\012" +
                            "\027\015\004\016\015\021\026\024\011\026\014\027\025" +
                            "\030\012\040\006\050\031\053\024\054\013\055\010\060" +
                            "\017\063\023\064\021\001\002\000\142\002\ufff9\004\020" +
                            "\005\016\006\007\007\022\010\ufff9\011\ufff9\012\ufff9\013" +
                            "\ufff9\014\ufff9\015\ufff9\016\015\017\ufff9\020\ufff9\021\026" +
                            "\022\ufff9\023\ufff9\024\011\025\ufff9\026\014\027\025\030" +
                            "\012\031\047\032\033\033\044\034\053\035\043\036\037" +
                            "\037\045\040\006\041\046\042\050\043\036\044\041\045" +
                            "\052\046\034\047\032\050\031\052\040\053\024\054\013" +
                            "\055\010\056\ufff9\057\035\060\017\061\ufff9\063\023\064" +
                            "\021\001\002\000\004\041\167\001\002\000\054\004\020" +
                            "\005\016\006\007\007\022\011\005\012\027\015\004\016" +
                            "\015\021\026\024\011\026\014\027\025\030\012\040\006" +
                            "\050\031\053\024\054\013\055\010\060\017\063\023\064" +
                            "\021\001\002\000\116\004\020\005\016\006\007\007\022" +
                            "\011\005\012\027\013\171\015\004\016\015\021\026\024" +
                            "\011\026\014\027\025\030\012\031\047\032\033\033\044" +
                            "\034\053\035\043\036\037\037\045\040\006\041\046\042" +
                            "\050\043\036\044\041\045\052\046\034\047\032\050\031" +
                            "\052\040\053\024\054\013\055\010\057\035\060\017\063" +
                            "\023\064\021\001\002\000\054\004\020\005\016\006\007" +
                            "\007\022\011\005\012\027\015\004\016\015\021\026\024" +
                            "\011\026\014\027\025\030\012\040\006\050\031\053\024" +
                            "\054\013\055\010\060\017\063\023\064\021\001\002\000" +
                            "\116\004\020\005\016\006\007\007\022\011\005\012\027" +
                            "\014\173\015\004\016\015\021\026\024\011\026\014\027" +
                            "\025\030\012\031\047\032\033\033\044\034\053\035\043" +
                            "\036\037\037\045\040\006\041\046\042\050\043\036\044" +
                            "\041\045\052\046\034\047\032\050\031\052\040\053\024" +
                            "\054\013\055\010\057\035\060\017\063\023\064\021\001" +
                            "\002\000\142\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
                            "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
                            "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
                            "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
                            "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
                            "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
                            "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
                            "\060\uffdf\061\uffdf\063\uffdf\064\uffdf\001\002"});
    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\171\000\004\002\027\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\002\161\001\001\000\002\001\001" +
                            "\000\004\002\155\001\001\000\004\002\152\001\001\000" +
                            "\004\002\151\001\001\000\004\002\150\001\001\000\002" +
                            "\001\001\000\004\002\143\001\001\000\004\002\142\001" +
                            "\001\000\004\002\135\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\003\127\001\001\000\002\001\001\000" +
                            "\004\002\125\001\001\000\002\001\001\000\004\002\101" +
                            "\001\001\000\002\001\001\000\004\002\050\001\001\000" +
                            "\002\001\001\000\004\002\072\001\001\000\004\002\071" +
                            "\001\001\000\004\002\070\001\001\000\004\002\067\001" +
                            "\001\000\004\002\066\001\001\000\004\002\065\001\001" +
                            "\000\004\002\064\001\001\000\004\002\063\001\001\000" +
                            "\002\001\001\000\004\002\062\001\001\000\004\002\061" +
                            "\001\001\000\004\002\060\001\001\000\004\002\057\001" +
                            "\001\000\004\002\056\001\001\000\004\002\055\001\001" +
                            "\000\004\002\050\001\001\000\004\002\054\001\001\000" +
                            "\004\002\053\001\001\000\004\002\050\001\001\000\004" +
                            "\002\050\001\001\000\004\002\050\001\001\000\004\002" +
                            "\050\001\001\000\004\002\050\001\001\000\004\002\050" +
                            "\001\001\000\004\002\050\001\001\000\004\002\050\001" +
                            "\001\000\004\002\050\001\001\000\004\002\050\001\001" +
                            "\000\004\002\050\001\001\000\004\002\050\001\001\000" +
                            "\004\002\050\001\001\000\004\002\050\001\001\000\004" +
                            "\002\050\001\001\000\004\002\050\001\001\000\002\001" +
                            "\001\000\004\002\075\001\001\000\004\002\050\001\001" +
                            "\000\004\002\077\001\001\000\004\002\050\001\001\000" +
                            "\002\001\001\000\004\002\050\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\002\106\001" +
                            "\001\000\004\002\050\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
                            "\114\001\001\000\004\002\050\001\001\000\002\001\001" +
                            "\000\004\002\117\001\001\000\004\002\050\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\002\124\001\001\000\004\002\050\001\001\000\004\002" +
                            "\050\001\001\000\002\001\001\000\004\004\130\001\001" +
                            "\000\002\001\001\000\004\003\132\001\001\000\002\001" +
                            "\001\000\004\002\134\001\001\000\004\002\050\001\001" +
                            "\000\004\002\050\001\001\000\002\001\001\000\004\002" +
                            "\140\001\001\000\004\002\050\001\001\000\002\001\001" +
                            "\000\004\002\050\001\001\000\004\002\050\001\001\000" +
                            "\004\002\145\001\001\000\004\002\050\001\001\000\004" +
                            "\002\147\001\001\000\004\002\050\001\001\000\004\002" +
                            "\050\001\001\000\004\002\050\001\001\000\004\002\050" +
                            "\001\001\000\004\002\154\001\001\000\004\002\050\001" +
                            "\001\000\004\002\050\001\001\000\002\001\001\000\004" +
                            "\002\160\001\001\000\004\002\050\001\001\000\004\002" +
                            "\050\001\001\000\002\001\001\000\004\002\164\001\001" +
                            "\000\004\002\050\001\001\000\002\001\001\000\004\002" +
                            "\167\001\001\000\004\002\050\001\001\000\004\002\171" +
                            "\001\001\000\004\002\050\001\001\000\002\001\001"});
    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Default constructor.
     */
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    public Parser(InputStream in) {
        this(new Lexer(in));
    }

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$Parser$actions {


    private final Parser parser;

    /**
     * Constructor
     */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    static Symbol symbol(String s) {
        return Symbol.symbol(s);
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // recList ::=
            {
                Vector<Bind> RESULT = null;
                RESULT = new Vector<>();
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("recList", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // recList ::= recList WITH bind
            {
                Vector<Bind> RESULT = null;
                int rsleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int rsright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Vector<Bind> rs = (Vector<Bind>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Bind r = (Bind) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                rs.addElement(r);
                RESULT = rs;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("recList", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // bind ::= ID ARROW e
            {
                Bind RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String x = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Bind(symbol(x), e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("bind", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // e ::= LPAREN e RPAREN
            {
                Expr RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = new Group(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // e ::= UNIT
            {
                Expr RESULT = null;
                RESULT = new Unit();
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // e ::= WHILE e DO e
            {
                Expr RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Loop(e1, e2);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // e ::= CASE e OF NIL ARROW e OR ID CONS ID ARROW e
            {
                Expr RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).right;
                Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
                Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                int hleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                int hright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                String h = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String t = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e3left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e3right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e3 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new CaseList(e1, e2, symbol(h), symbol(t), e3);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 11)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // e ::= CASE e OF INL ID ARROW e OR INR ID ARROW e
            {
                Expr RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).right;
                Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).value;
                int x2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
                int x2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
                String x2 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                int x3left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int x3right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String x3 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e3left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e3right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e3 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new CaseSum(e1, symbol(x2), e2, symbol(x3), e3);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 11)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // e ::= IF e THEN e ELSE e
            {
                Expr RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int e3left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int e3right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e3 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Cond(e1, e2, e3);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // e ::= LAZY ID EQ e IN e END
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                String x = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = new LazyLet(symbol(x), e1, e2);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // e ::= LET ID EQ e IN e END
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                String x = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = new Let(symbol(x), e1, e2);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // e ::= e e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new App(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // e ::= e SEMI e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Seq(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // e ::= e ASSIGN e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Assign(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // e ::= e CONS e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Cons(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // e ::= e ORELSE e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new OrElse(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // e ::= e ANDALSO e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new AndAlso(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // e ::= e GE e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new GreaterEq(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // e ::= e GT e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Greater(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // e ::= e LE e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new LessEq(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // e ::= e LT e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Less(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // e ::= e NE e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Neq(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // e ::= e EQ e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Eq(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // e ::= e MOD e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Mod(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // e ::= e DIV e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Div(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // e ::= e MUL e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Mul(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // e ::= e SUB e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Sub(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // e ::= e ADD e
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Add(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // e ::= INR e
            {
                Expr RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new InR(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // e ::= INL e
            {
                Expr RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new InL(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // e ::= DEREF e
            {
                Expr RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Deref(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // e ::= NOT e
            {
                Expr RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Not(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // e ::= NEG e
            {
                Expr RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Neg(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // e ::= LPAREN e COMMA e RPAREN
            {
                Expr RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = new Pair(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // e ::= REC bind recList
            {
                Expr RESULT = null;
                int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                Bind r = (Bind) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                int rsleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int rsright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Vector<Bind> rs = (Vector<Bind>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Rec(r, rs);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // e ::= LAZYFN ID ARROW e
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String x = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new LazyFn(symbol(x), e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // e ::= FN ID ARROW e
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                String x = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Fn(symbol(x), e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // e ::= REF e
            {
                Expr RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Ref(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // e ::= NIL
            {
                Expr RESULT = null;
                RESULT = new Nil();
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // e ::= FALSE
            {
                Expr RESULT = null;
                RESULT = new BooleanLiteral(false);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // e ::= TRUE
            {
                Expr RESULT = null;
                RESULT = new BooleanLiteral(true);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // e ::= ID
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                String x = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new Name(symbol(x));
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // e ::= NUM
            {
                Expr RESULT = null;
                int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                Integer n = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new IntegerLiteral(n.intValue());
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("e", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= e EOF
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                Expr start_val = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}

